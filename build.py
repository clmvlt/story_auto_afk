import subprocess
import sys
import os
import shutil

def check_pyinstaller():
    """V√©rifie si PyInstaller est install√©"""
    try:
        import PyInstaller
        print("‚úì PyInstaller est d√©j√† install√©")
        return True
    except ImportError:
        print("PyInstaller n'est pas install√©. Installation en cours...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
        print("‚úì PyInstaller install√© avec succ√®s")
        return True

def create_spec_file():
    """Cr√©e un fichier .spec personnalis√© pour PyInstaller"""
    spec_content = """# -*- mode: python ; coding: utf-8 -*-

a = Analysis(
    ['fivem_auto.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('send_keys.py', '.')  # Inclure send_keys.py dans le bundle
    ],
    hiddenimports=[
        'pygetwindow',
        'pyautogui',
        'pydirectinput',
        'PIL',
        'numpy',
        'cv2',
        'mouseinfo',
        'pyperclip',
        'pytweening',
        'pymsgbox'
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    noarchive=False,
    optimize=0,
)

pyz = PYZ(a.pure)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.datas,
    [],
    name='FiveM_Auto',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,  # Garder la console pour voir les logs
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,  # Vous pouvez ajouter une ic√¥ne ici si vous voulez
    version_file=None,
    uac_admin=False,  # Mettre √† True si vous avez besoin des droits admin
    uac_uiaccess=False,
)
"""

    with open("FiveM_Auto.spec", "w", encoding="utf-8") as f:
        f.write(spec_content)
    print("‚úì Fichier .spec cr√©√©")

def build_exe():
    """Lance la compilation avec PyInstaller"""
    print("\nüì¶ Compilation de l'ex√©cutable...")
    print("Cela peut prendre quelques minutes...\n")

    try:
        # Utiliser le fichier .spec personnalis√©
        subprocess.check_call([
            sys.executable,
            "-m",
            "PyInstaller",
            "--clean",  # Nettoyer les fichiers temporaires
            "--noconfirm",  # Pas de confirmation pour √©craser
            "FiveM_Auto.spec"
        ])
        print("\n‚úì Compilation termin√©e avec succ√®s!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"\n‚úó Erreur lors de la compilation: {e}")
        return False

def clean_build_files():
    """Nettoie les fichiers temporaires de build"""
    dirs_to_remove = ["build", "__pycache__"]
    files_to_remove = ["FiveM_Auto.spec"]

    for dir_name in dirs_to_remove:
        if os.path.exists(dir_name):
            shutil.rmtree(dir_name)
            print(f"‚úì Dossier {dir_name} supprim√©")

    for file_name in files_to_remove:
        if os.path.exists(file_name):
            os.remove(file_name)
            print(f"‚úì Fichier {file_name} supprim√©")

def main():
    print("=== Build de FiveM Auto ===\n")

    # V√©rifier qu'on est dans le bon dossier
    if not os.path.exists("fivem_auto.py"):
        print("‚úó Erreur: fivem_auto.py non trouv√©!")
        print("Assurez-vous d'ex√©cuter ce script dans le dossier du projet.")
        return

    if not os.path.exists("send_keys.py"):
        print("‚úó Erreur: send_keys.py non trouv√©!")
        print("Assurez-vous que send_keys.py est dans le m√™me dossier.")
        return

    # V√©rifier/installer PyInstaller
    if not check_pyinstaller():
        print("‚úó Impossible d'installer PyInstaller")
        return

    # Cr√©er le fichier .spec
    create_spec_file()

    # Compiler l'ex√©cutable
    if build_exe():
        exe_path = os.path.join("dist", "FiveM_Auto.exe")
        if os.path.exists(exe_path):
            size_mb = os.path.getsize(exe_path) / (1024 * 1024)
            print(f"\n‚úÖ Ex√©cutable cr√©√© avec succ√®s!")
            print(f"üìç Emplacement: {os.path.abspath(exe_path)}")
            print(f"üìä Taille: {size_mb:.2f} MB")
            print(f"\nL'ex√©cutable peut √™tre lanc√© sur n'importe quel PC Windows")
            print("m√™me sans Python install√©!")
        else:
            print("\n‚úó L'ex√©cutable n'a pas √©t√© cr√©√©")

    # Optionnel: nettoyer les fichiers de build
    response = input("\nVoulez-vous nettoyer les fichiers temporaires de build? (o/n): ")
    if response.lower() == 'o':
        clean_build_files()
        print("‚úì Nettoyage termin√©")

    print("\n=== Build termin√© ===")

if __name__ == "__main__":
    main()